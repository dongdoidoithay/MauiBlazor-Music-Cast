
@inject ILogger<Discover> _logger
@inject AppService _appService
@inject NavigationManager NavigationManager
@inject PersistentComponentState ApplicationState
@implements IDisposable

<div class="song-menu-container">
    @if (_isLoading)
    {
        <MudGrid Class="mt-4" Spacing="3">
            @for (int i = 0; i < 12; i++)
            {
                <MudItem xs="4" md="3">
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="60px" />
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
       <MudGrid Class="mt-4">
                @foreach (var songMenu in dataLastUpdate.Data)
                {
                    <MudItem xs="4" md="3" Class="d-flex justify-center">
                        <div class="song-menu-item" onclick=@(()=>GotoSongMenuPage(songMenu.IdDoc, songMenu.Name,songMenu.Image))>
                            <img src="@songMenu.Image"
                                 alt="@songMenu.Name"
                                 class="rounded-lg mb-1 song-menu-img">
                            <div class="song-menu-name">@songMenu.Name</div>
                        </div>
                    </MudItem>
                }
        </MudGrid>
        @if (_isLoading)
        {
            <div class="d-flex justify-center mt-2">
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            </div>
        }
        @if (_pageEnd)
        {
            @* <EndLine /> *@
        }
    }
</div>
@code {
    private string _currentQueryString = "";
    private static readonly SemaphoreSlim PageReloadSlim = new(1, 1);
    private static readonly SemaphoreSlim SongMenuLoadSlim = new(1, 1);
    private bool _pageEnd = false;
    private int _page = 0;
    private bool _isLoading = false;
    private ResponseDataLastUppdate dataLastUpdate;
    //tim hieu them
    private PersistingComponentStateSubscription _persistingSubscription;
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await base.OnInitializedAsync();

        //loadata

        fetchDataLastUpdate();

    }
    private async void fetchDataLastUpdate()
    {
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistLastUpdate);

        if (!ApplicationState.TryTakeFromJson<ResponseDataLastUppdate>("lastupdate-" + _page, out var restored))
        {
            dataLastUpdate = await _appService.GetDataLastUpdate(_page);
        }
        else
        {
            dataLastUpdate = restored!;
        }
        _isLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    private Task PersistLastUpdate()
    {
        ApplicationState.PersistAsJson("lastupdate-" + _page, dataLastUpdate);
        return Task.CompletedTask;
    }


    private void GotoSongMenuPage(string id, string name, string imageUrl)
    {
        NavigationManager.NavigateTo($"/song-menu/{id}");
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }
}
